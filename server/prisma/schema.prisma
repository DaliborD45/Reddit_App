// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Community {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  name         String
  type         String
  adultContent Boolean         @default(false)
  Posts        Post[]
  Users        CommunityUser[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email       String          @unique
  password    String
  name        String
  Posts       Post[]
  Likes       Like[]
  Communities CommunityUser[]
}

model CommunityUser {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, communityId])
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @default("") @db.VarChar(255)
  content     String?   @default("") @db.Text
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  authorName  String
  imageId     String?
  Like        Like[]
  Comments    Comment[]
  Community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int

}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  username  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  authorId  Int
  type      String
  value     Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
